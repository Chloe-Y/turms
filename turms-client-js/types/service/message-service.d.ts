import TurmsClient from '../turms-client';
import { ParsedModel } from '../model/parsed-model';
import MessageAddition from '../model/message/message-addition';
export default class MessageService {
    private static readonly DEFAULT_MENTIONED_USER_IDS_PARSER;
    private _turmsClient;
    private _mentionedUserIdsParser?;
    private _messageListeners;
    addMessageListener(listener: (message: ParsedModel.Message, messageAddition: MessageAddition) => void): void;
    removeMessageListener(listener: (message: ParsedModel.Message, messageAddition: MessageAddition) => void): void;
    constructor(turmsClient: TurmsClient);
    sendMessage(isGroupMessage: boolean, targetId: string, deliveryDate?: Date, text?: string, records?: Uint8Array[], burnAfter?: number): Promise<string>;
    forwardMessage(messageId: string, isGroupMessage: boolean, targetId: string): Promise<string>;
    updateSentMessage(messageId: string, text?: string, records?: Uint8Array[]): Promise<void>;
    queryMessages(ids?: string[], areGroupMessages?: boolean, areSystemMessages?: boolean, fromId?: string, deliveryDateAfter?: Date, deliveryDateBefore?: Date, size?: number): Promise<ParsedModel.Message[]>;
    queryMessagesWithTotal(ids?: string[], areGroupMessages?: boolean, areSystemMessages?: boolean, fromId?: string, deliveryDateAfter?: Date, deliveryDateBefore?: Date, size?: number): Promise<ParsedModel.MessagesWithTotal[]>;
    recallMessage(messageId: string, recallDate?: Date): Promise<void>;
    isMentionEnabled(): boolean;
    enableMention(mentionedUserIdsParser?: (message: ParsedModel.Message) => string[]): void;
    static generateLocationRecord(latitude: number, longitude: number, locationName?: string, address?: string): Uint8Array;
    static generateAudioRecordByDescription(url: string, duration?: number, format?: string, size?: number): Uint8Array;
    static generateAudioRecordByData(data: ArrayBuffer): Uint8Array;
    static generateVideoRecordByDescription(url: string, duration?: number, format?: string, size?: number): Uint8Array;
    static generateVideoRecordByData(data: ArrayBuffer): Uint8Array;
    static generateImageRecordByData(data: ArrayBuffer): Uint8Array;
    static generateImageRecordByDescription(url: string, fileSize?: number, imageSize?: number, original?: boolean): Uint8Array;
    static generateFileRecordByDate(data: ArrayBuffer): Uint8Array;
    static generateFileRecordByDescription(url: string, format?: string, size?: number): Uint8Array;
    private _parseMessageAddition;
    private static _createMessageRequest2Message;
}
