import { im } from '../model/proto-bundle';
import { ParsedNotification } from '../model/parsed-notification';
import ConnectionService, { ConnectionDisconnectInfo, ConnectOptions } from './service/connection-service';
import StateStore from './state-store';
import TurmsNotification = im.turms.proto.TurmsNotification;
import ITurmsRequest = im.turms.proto.ITurmsRequest;
export default class TurmsDriver {
    private readonly _stateStore;
    private _connectionService;
    private _heartbeatService;
    private _messageService;
    constructor(wsUrl?: string, connectTimeout?: number, requestTimeout?: number, minRequestInterval?: number, heartbeatInterval?: number);
    stateStore(): StateStore;
    initConnectionService(wsUrl?: string, connectTimeout?: number): ConnectionService;
    close(): Promise<void>;
    startHeartbeat(): void;
    stopHeartbeat(): void;
    sendHeartbeat(): Promise<void>;
    get isHeartbeatRunning(): boolean;
    connect(options?: ConnectOptions): Promise<void>;
    disconnect(): Promise<void>;
    get isConnected(): boolean;
    addOnConnectedListener(listener: () => void): void;
    addOnDisconnectedListener(listener: (disconnectInfo: ConnectionDisconnectInfo) => void): void;
    removeOnConnectedListener(listener: () => void): void;
    removeOnDisconnectedListener(listener: (disconnectInfo: ConnectionDisconnectInfo) => void): void;
    send(message: ITurmsRequest): Promise<TurmsNotification>;
    addNotificationListener(listener: ((notification: ParsedNotification) => void)): void;
    removeNotificationListener(listener: ((notification: ParsedNotification) => void)): void;
    private _onConnectionDisconnected;
    private _onMessage;
}
