# Prerequisites:
# Make sure the loki driver is installed:
# docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions
#
# Ways to Run:
# docker-compose -f docker-compose.standalone.yml up --force-recreate
#
# Run in a specific environment (e.g. "dev"):
# Powershell: $env:ENV="dev";docker-compose -f docker-compose.standalone.yml up --force-recreate
# Unix: ENV=dev docker-compose -f docker-compose.standalone.yml up --force-recreate
#
# Run with optional monitoring services (Prometheus+Grafana)
# Run with "--profile monitoring": docker-compose -f docker-compose.standalone.yml --profile monitoring up --force-recreate
#

# Note:
# 1. "mem_limit" is mentioned removed in v3 but still can work in fact if running with compose-v1.29.2

version: "3.9"

x-logging: &logging
  logging:
    driver: loki
    options:
      loki-url: "http://host.docker.internal:3100/loki/api/v1/push"

x-logging-mongo: &logging-mongo
  logging:
    driver: loki
    options:
      loki-url: "http://host.docker.internal:3100/loki/api/v1/push"
      # See https://docs.mongodb.com/manual/reference/log-messages
      loki-pipeline-stages: |
        - json:
            expressions:
              time: t."$date"
        - timestamp:
            format: RFC3339
            source: time

x-logging-turms: &logging-turms
  logging:
    driver: loki
    options:
      loki-url: "http://host.docker.internal:3100/loki/api/v1/push"
      # The regex has been optimized:
      # it takes about 50 steps to parse a single log line
      loki-pipeline-stages: |
        - multiline:
            firstline: '^\d{4}-\d{2}-\d{2}\s\d{1,2}\:'
        - regex:
            expression: '(?P<time>\d{4}-\d{2}-\d{2}\s\d{1,2}\:\d{2}\:\d{2}\.\d{3})\s+(?P<level>[A-Z]{4,5})\s+(?P<node_type>[A-Z])\s+(?P<node_id>\S*)\s+\[(?P<trace_id>.{19})\]\s+(?P<thread>\S*)\s+(?P<class>\S*)\s+:\s(?P<msg>.*)'
        - labels:
            node_type:
            node_id:
        - timestamp:
            format: '2006-01-02 15:04:05.000'
            source: time

services:
  # MongoDB
  mongodb-router:
    image: "bitnami/mongodb-sharded:4.4.4"
    depends_on:
      - loki
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-router
      - MONGODB_SHARDING_MODE=mongos
      - MONGODB_CFG_PRIMARY_HOST=mongodb-cfg
      - MONGODB_CFG_REPLICA_SET_NAME=cfgreplicaset
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_ROOT_PASSWORD=turms
    healthcheck:
      test: "mongo -u root -p turms --port 27017 --eval='sh.status()' | grep mongodb-shard | grep -q '\"state\" : 1'"
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "27017:27017"
    <<: *logging-mongo

  mongodb-shard:
    image: "bitnami/mongodb-sharded:4.4.4"
    depends_on:
      - loki
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-shard
      - MONGODB_SHARDING_MODE=shardsvr
      - MONGODB_MONGOS_HOST=mongodb-router
      - MONGODB_ROOT_PASSWORD=turms
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_REPLICA_SET_NAME=shard01
    <<: *logging-mongo

  mongodb-cfg:
    image: "bitnami/mongodb-sharded:4.4.4"
    depends_on:
      - loki
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-cfg
      - MONGODB_SHARDING_MODE=configsvr
      - MONGODB_ROOT_PASSWORD=turms
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_REPLICA_SET_NAME=cfgreplicaset
    <<: *logging-mongo

  # Redis
  redis:
    image: redis:6.2-alpine
    depends_on:
      - loki
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"
    <<: *logging

  # turms servers
  turms:
    image: "ghcr.io/turms-im/turms"
    depends_on:
      loki:
        condition: service_started
      mongodb-router:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      TURMS_JVM_OPTS: >
        -Dcom.sun.management.jmxremote=true
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.local.only=false
        -Dcom.sun.management.jmxremote.port=8839
        -Dcom.sun.management.jmxremote.rmi.port=8839
        -Dcom.sun.management.jmxremote.ssl=false
        -Djava.rmi.server.hostname=localhost

        -Dspring.profiles.active=${ENV}

        -Dturms.cluster.connection.server.port-auto-increment=false

        -Dturms.cluster.discovery.address.advertise-strategy=advertise_address
        -Dturms.cluster.discovery.address.advertise-host=turms

        -Dturms.cluster.shared-config.mongo.uri=mongodb://root:turms@mongodb-router:27017/turms-standalone?authSource=admin
        -Dturms.service.mongo.admin.uri=mongodb://root:turms@mongodb-router:27017/turms-standalone?authSource=admin
        -Dturms.service.mongo.user.uri=mongodb://root:turms@mongodb-router:27017/turms-standalone?authSource=admin
        -Dturms.service.mongo.group.uri=mongodb://root:turms@mongodb-router:27017/turms-standalone?authSource=admin
        -Dturms.service.mongo.conversation.uri=mongodb://root:turms@mongodb-router:27017/turms-standalone?authSource=admin
        -Dturms.service.mongo.message.uri=mongodb://root:turms@mongodb-router:27017/turms-standalone?authSource=admin

        -Dturms.service.redis.session.uri-list[0]=redis://redis:6379
        -Dturms.service.redis.location.uri-list[0]=redis://redis:6379
    mem_limit: 2g
    healthcheck:
      test: "curl --fail --silent --user turms:turms turms:8510/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "7510:7510" # RPC
      - "8510:8510" # Metrics APIs + Admin APIs
      - "8839:8839" # JMX
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
#    volumes:
#      - "./container/turms/hprof:/opt/turms/turms/hprof"
#      - "./container/turms/jfr:/opt/turms/turms/jfr"
#      - "./container/turms/log:/opt/turms/turms/log"
#      - "./container/turms/config:/opt/turms/turms/config" # Includes "application.yaml" and "jvm.options"
    <<: *logging-turms

  turms-admin:
    image: "ghcr.io/turms-im/turms-admin"
    ports:
      - "6510:6510"
    <<: *logging

  turms-gateway:
    image: "ghcr.io/turms-im/turms-gateway"
    depends_on:
      loki:
        condition: service_started
      mongodb-router:
        condition: service_healthy
      redis:
        condition: service_healthy
      # Wait for turms to ensure turms-gateway can fetch data from DB safely after turms has inited collections
      turms:
        condition: service_healthy
    environment:
      TURMS_GATEWAY_JVM_OPTS: >
        -Dcom.sun.management.jmxremote=true
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.local.only=false
        -Dcom.sun.management.jmxremote.port=8849
        -Dcom.sun.management.jmxremote.rmi.port=8849
        -Dcom.sun.management.jmxremote.ssl=false
        -Djava.rmi.server.hostname=localhost

        -Dspring.profiles.active=${ENV}

        -Dturms.cluster.connection.server.port=7610
        -Dturms.cluster.connection.server.port-auto-increment=false

        -Dturms.cluster.discovery.address.advertise-strategy=advertise_address
        -Dturms.cluster.discovery.address.advertise-host=turms-gateway

        -Dturms.cluster.shared-config.mongo.uri=mongodb://root:turms@mongodb-router:27017/turms-standalone?authSource=admin
        -Dturms.gateway.mongo.user.uri=mongodb://root:turms@mongodb-router:27017/turms-standalone?authSource=admin

        -Dturms.gateway.redis.session.uri-list[0]=redis://redis:6379
        -Dturms.gateway.redis.location.uri-list[0]=redis://redis:6379
    healthcheck:
      test: "curl --fail --silent --user turms:turms turms-gateway:9510/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
    mem_limit: 2g
    ports:
      - "7610:7610" # RPC
      - "8849:8849" # JMX
      - "9510:9510" # Metrics APIs
      - "10510:10510" # WebSocket
      - "11510:11510" # TCP
      - "12510:12510" # UDP
    ulimits:
      nofile:
        soft: 1024000
        hard: 1024000
#    volumes:
#      - "./container/turms-gateway/hprof:/opt/turms/turms-gateway/hprof"
#      - "./container/turms-gateway/jfr:/opt/turms/turms-gateway/jfr"
#      - "./container/turms-gateway/log:/opt/turms/turms-gateway/log"
#      - "./container/turms-gateway/config:/opt/turms/turms-gateway/config" # Includes "application.yaml" and "jvm.options"
    <<: *logging-turms

  # optional services for observability - metrics

  grafana:
    image: grafana/grafana:8.0.3
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=turms
      - GF_SECURITY_ADMIN_PASSWORD=turms
    ports:
      - "3000:3000"
    profiles:
      - monitoring
    restart: unless-stopped
    volumes:
      - ./ops/grafana/provisioning/:/etc/grafana/provisioning/

  prometheus:
    image: prom/prometheus:v2.27.1
    ports:
      - "9090:9090"
    profiles:
      - monitoring
    restart: unless-stopped
    volumes:
      - ./ops/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  node-exporter:
    image: prom/node-exporter:v1.1.2
    ports:
      - "9100:9100"
    profiles:
      - monitoring

  cadvisor:
    image: google/cadvisor:v0.33.0
    ports:
      - "8080:8080"
    profiles:
      - monitoring
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  redis-exporter:
    image: oliver006/redis_exporter:v1.24.0
    depends_on:
      - redis
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    profiles:
      - monitoring

  # Services for observability - logging

  loki:
    image: grafana/loki:2.2.1
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

